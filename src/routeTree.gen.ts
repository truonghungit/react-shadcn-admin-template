/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './features/__root';
import { Route as authenticationRouteRouteImport } from './features/(authentication)/route';
import { Route as errorsNotFoundRouteImport } from './features/(errors)/not-found';
import { Route as errorsMaintenanceRouteImport } from './features/(errors)/maintenance';
import { Route as errorsAccessDeniedRouteImport } from './features/(errors)/access-denied';
import { Route as authenticationSignUpIndexRouteImport } from './features/(authentication)/sign-up/index';
import { Route as authenticationSignInIndexRouteImport } from './features/(authentication)/sign-in/index';
import { Route as authenticationResetPasswordIndexRouteImport } from './features/(authentication)/reset-password/index';
import { Route as authenticationForgotPasswordIndexRouteImport } from './features/(authentication)/forgot-password/index';
import { Route as adminUsersIndexRouteImport } from './features/(admin)/users/index';
import { Route as adminContactsIndexRouteImport } from './features/(admin)/contacts/index';
import { Route as adminUsersCreateRouteImport } from './features/(admin)/users/create';
import { Route as adminContactsCreateRouteImport } from './features/(admin)/contacts/create';
import { Route as adminUsersUserIdRouteRouteImport } from './features/(admin)/users/$userId/route';
import { Route as adminUsersUserIdIndexRouteImport } from './features/(admin)/users/$userId/index';
import { Route as adminUsersUserIdEditRouteImport } from './features/(admin)/users/$userId/edit';

const authenticationRouteRoute = authenticationRouteRouteImport.update({
  id: '/(authentication)',
  getParentRoute: () => rootRouteImport,
} as any);
const errorsNotFoundRoute = errorsNotFoundRouteImport.update({
  id: '/(errors)/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any);
const errorsMaintenanceRoute = errorsMaintenanceRouteImport.update({
  id: '/(errors)/maintenance',
  path: '/maintenance',
  getParentRoute: () => rootRouteImport,
} as any);
const errorsAccessDeniedRoute = errorsAccessDeniedRouteImport.update({
  id: '/(errors)/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRouteImport,
} as any);
const authenticationSignUpIndexRoute =
  authenticationSignUpIndexRouteImport.update({
    id: '/sign-up/',
    path: '/sign-up/',
    getParentRoute: () => authenticationRouteRoute,
  } as any);
const authenticationSignInIndexRoute =
  authenticationSignInIndexRouteImport.update({
    id: '/sign-in/',
    path: '/sign-in/',
    getParentRoute: () => authenticationRouteRoute,
  } as any);
const authenticationResetPasswordIndexRoute =
  authenticationResetPasswordIndexRouteImport.update({
    id: '/reset-password/',
    path: '/reset-password/',
    getParentRoute: () => authenticationRouteRoute,
  } as any);
const authenticationForgotPasswordIndexRoute =
  authenticationForgotPasswordIndexRouteImport.update({
    id: '/forgot-password/',
    path: '/forgot-password/',
    getParentRoute: () => authenticationRouteRoute,
  } as any);
const adminUsersIndexRoute = adminUsersIndexRouteImport.update({
  id: '/(admin)/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any);
const adminContactsIndexRoute = adminContactsIndexRouteImport.update({
  id: '/(admin)/contacts/',
  path: '/contacts/',
  getParentRoute: () => rootRouteImport,
} as any);
const adminUsersCreateRoute = adminUsersCreateRouteImport.update({
  id: '/(admin)/users/create',
  path: '/users/create',
  getParentRoute: () => rootRouteImport,
} as any);
const adminContactsCreateRoute = adminContactsCreateRouteImport.update({
  id: '/(admin)/contacts/create',
  path: '/contacts/create',
  getParentRoute: () => rootRouteImport,
} as any);
const adminUsersUserIdRouteRoute = adminUsersUserIdRouteRouteImport.update({
  id: '/(admin)/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any);
const adminUsersUserIdIndexRoute = adminUsersUserIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => adminUsersUserIdRouteRoute,
} as any);
const adminUsersUserIdEditRoute = adminUsersUserIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => adminUsersUserIdRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof authenticationRouteRouteWithChildren;
  '/access-denied': typeof errorsAccessDeniedRoute;
  '/maintenance': typeof errorsMaintenanceRoute;
  '/not-found': typeof errorsNotFoundRoute;
  '/users/$userId': typeof adminUsersUserIdRouteRouteWithChildren;
  '/contacts/create': typeof adminContactsCreateRoute;
  '/users/create': typeof adminUsersCreateRoute;
  '/contacts': typeof adminContactsIndexRoute;
  '/users': typeof adminUsersIndexRoute;
  '/forgot-password': typeof authenticationForgotPasswordIndexRoute;
  '/reset-password': typeof authenticationResetPasswordIndexRoute;
  '/sign-in': typeof authenticationSignInIndexRoute;
  '/sign-up': typeof authenticationSignUpIndexRoute;
  '/users/$userId/edit': typeof adminUsersUserIdEditRoute;
  '/users/$userId/': typeof adminUsersUserIdIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof authenticationRouteRouteWithChildren;
  '/access-denied': typeof errorsAccessDeniedRoute;
  '/maintenance': typeof errorsMaintenanceRoute;
  '/not-found': typeof errorsNotFoundRoute;
  '/contacts/create': typeof adminContactsCreateRoute;
  '/users/create': typeof adminUsersCreateRoute;
  '/contacts': typeof adminContactsIndexRoute;
  '/users': typeof adminUsersIndexRoute;
  '/forgot-password': typeof authenticationForgotPasswordIndexRoute;
  '/reset-password': typeof authenticationResetPasswordIndexRoute;
  '/sign-in': typeof authenticationSignInIndexRoute;
  '/sign-up': typeof authenticationSignUpIndexRoute;
  '/users/$userId/edit': typeof adminUsersUserIdEditRoute;
  '/users/$userId': typeof adminUsersUserIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/(authentication)': typeof authenticationRouteRouteWithChildren;
  '/(errors)/access-denied': typeof errorsAccessDeniedRoute;
  '/(errors)/maintenance': typeof errorsMaintenanceRoute;
  '/(errors)/not-found': typeof errorsNotFoundRoute;
  '/(admin)/users/$userId': typeof adminUsersUserIdRouteRouteWithChildren;
  '/(admin)/contacts/create': typeof adminContactsCreateRoute;
  '/(admin)/users/create': typeof adminUsersCreateRoute;
  '/(admin)/contacts/': typeof adminContactsIndexRoute;
  '/(admin)/users/': typeof adminUsersIndexRoute;
  '/(authentication)/forgot-password/': typeof authenticationForgotPasswordIndexRoute;
  '/(authentication)/reset-password/': typeof authenticationResetPasswordIndexRoute;
  '/(authentication)/sign-in/': typeof authenticationSignInIndexRoute;
  '/(authentication)/sign-up/': typeof authenticationSignUpIndexRoute;
  '/(admin)/users/$userId/edit': typeof adminUsersUserIdEditRoute;
  '/(admin)/users/$userId/': typeof adminUsersUserIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/access-denied'
    | '/maintenance'
    | '/not-found'
    | '/users/$userId'
    | '/contacts/create'
    | '/users/create'
    | '/contacts'
    | '/users'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/users/$userId/edit'
    | '/users/$userId/';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/access-denied'
    | '/maintenance'
    | '/not-found'
    | '/contacts/create'
    | '/users/create'
    | '/contacts'
    | '/users'
    | '/forgot-password'
    | '/reset-password'
    | '/sign-in'
    | '/sign-up'
    | '/users/$userId/edit'
    | '/users/$userId';
  id:
    | '__root__'
    | '/(authentication)'
    | '/(errors)/access-denied'
    | '/(errors)/maintenance'
    | '/(errors)/not-found'
    | '/(admin)/users/$userId'
    | '/(admin)/contacts/create'
    | '/(admin)/users/create'
    | '/(admin)/contacts/'
    | '/(admin)/users/'
    | '/(authentication)/forgot-password/'
    | '/(authentication)/reset-password/'
    | '/(authentication)/sign-in/'
    | '/(authentication)/sign-up/'
    | '/(admin)/users/$userId/edit'
    | '/(admin)/users/$userId/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  authenticationRouteRoute: typeof authenticationRouteRouteWithChildren;
  errorsAccessDeniedRoute: typeof errorsAccessDeniedRoute;
  errorsMaintenanceRoute: typeof errorsMaintenanceRoute;
  errorsNotFoundRoute: typeof errorsNotFoundRoute;
  adminUsersUserIdRouteRoute: typeof adminUsersUserIdRouteRouteWithChildren;
  adminContactsCreateRoute: typeof adminContactsCreateRoute;
  adminUsersCreateRoute: typeof adminUsersCreateRoute;
  adminContactsIndexRoute: typeof adminContactsIndexRoute;
  adminUsersIndexRoute: typeof adminUsersIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authentication)': {
      id: '/(authentication)';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof authenticationRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(errors)/not-found': {
      id: '/(errors)/not-found';
      path: '/not-found';
      fullPath: '/not-found';
      preLoaderRoute: typeof errorsNotFoundRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(errors)/maintenance': {
      id: '/(errors)/maintenance';
      path: '/maintenance';
      fullPath: '/maintenance';
      preLoaderRoute: typeof errorsMaintenanceRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(errors)/access-denied': {
      id: '/(errors)/access-denied';
      path: '/access-denied';
      fullPath: '/access-denied';
      preLoaderRoute: typeof errorsAccessDeniedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(authentication)/sign-up/': {
      id: '/(authentication)/sign-up/';
      path: '/sign-up';
      fullPath: '/sign-up';
      preLoaderRoute: typeof authenticationSignUpIndexRouteImport;
      parentRoute: typeof authenticationRouteRoute;
    };
    '/(authentication)/sign-in/': {
      id: '/(authentication)/sign-in/';
      path: '/sign-in';
      fullPath: '/sign-in';
      preLoaderRoute: typeof authenticationSignInIndexRouteImport;
      parentRoute: typeof authenticationRouteRoute;
    };
    '/(authentication)/reset-password/': {
      id: '/(authentication)/reset-password/';
      path: '/reset-password';
      fullPath: '/reset-password';
      preLoaderRoute: typeof authenticationResetPasswordIndexRouteImport;
      parentRoute: typeof authenticationRouteRoute;
    };
    '/(authentication)/forgot-password/': {
      id: '/(authentication)/forgot-password/';
      path: '/forgot-password';
      fullPath: '/forgot-password';
      preLoaderRoute: typeof authenticationForgotPasswordIndexRouteImport;
      parentRoute: typeof authenticationRouteRoute;
    };
    '/(admin)/users/': {
      id: '/(admin)/users/';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof adminUsersIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(admin)/contacts/': {
      id: '/(admin)/contacts/';
      path: '/contacts';
      fullPath: '/contacts';
      preLoaderRoute: typeof adminContactsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(admin)/users/create': {
      id: '/(admin)/users/create';
      path: '/users/create';
      fullPath: '/users/create';
      preLoaderRoute: typeof adminUsersCreateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(admin)/contacts/create': {
      id: '/(admin)/contacts/create';
      path: '/contacts/create';
      fullPath: '/contacts/create';
      preLoaderRoute: typeof adminContactsCreateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(admin)/users/$userId': {
      id: '/(admin)/users/$userId';
      path: '/users/$userId';
      fullPath: '/users/$userId';
      preLoaderRoute: typeof adminUsersUserIdRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(admin)/users/$userId/': {
      id: '/(admin)/users/$userId/';
      path: '/';
      fullPath: '/users/$userId/';
      preLoaderRoute: typeof adminUsersUserIdIndexRouteImport;
      parentRoute: typeof adminUsersUserIdRouteRoute;
    };
    '/(admin)/users/$userId/edit': {
      id: '/(admin)/users/$userId/edit';
      path: '/edit';
      fullPath: '/users/$userId/edit';
      preLoaderRoute: typeof adminUsersUserIdEditRouteImport;
      parentRoute: typeof adminUsersUserIdRouteRoute;
    };
  }
}

interface authenticationRouteRouteChildren {
  authenticationForgotPasswordIndexRoute: typeof authenticationForgotPasswordIndexRoute;
  authenticationResetPasswordIndexRoute: typeof authenticationResetPasswordIndexRoute;
  authenticationSignInIndexRoute: typeof authenticationSignInIndexRoute;
  authenticationSignUpIndexRoute: typeof authenticationSignUpIndexRoute;
}

const authenticationRouteRouteChildren: authenticationRouteRouteChildren = {
  authenticationForgotPasswordIndexRoute:
    authenticationForgotPasswordIndexRoute,
  authenticationResetPasswordIndexRoute: authenticationResetPasswordIndexRoute,
  authenticationSignInIndexRoute: authenticationSignInIndexRoute,
  authenticationSignUpIndexRoute: authenticationSignUpIndexRoute,
};

const authenticationRouteRouteWithChildren =
  authenticationRouteRoute._addFileChildren(authenticationRouteRouteChildren);

interface adminUsersUserIdRouteRouteChildren {
  adminUsersUserIdEditRoute: typeof adminUsersUserIdEditRoute;
  adminUsersUserIdIndexRoute: typeof adminUsersUserIdIndexRoute;
}

const adminUsersUserIdRouteRouteChildren: adminUsersUserIdRouteRouteChildren = {
  adminUsersUserIdEditRoute: adminUsersUserIdEditRoute,
  adminUsersUserIdIndexRoute: adminUsersUserIdIndexRoute,
};

const adminUsersUserIdRouteRouteWithChildren =
  adminUsersUserIdRouteRoute._addFileChildren(
    adminUsersUserIdRouteRouteChildren
  );

const rootRouteChildren: RootRouteChildren = {
  authenticationRouteRoute: authenticationRouteRouteWithChildren,
  errorsAccessDeniedRoute: errorsAccessDeniedRoute,
  errorsMaintenanceRoute: errorsMaintenanceRoute,
  errorsNotFoundRoute: errorsNotFoundRoute,
  adminUsersUserIdRouteRoute: adminUsersUserIdRouteRouteWithChildren,
  adminContactsCreateRoute: adminContactsCreateRoute,
  adminUsersCreateRoute: adminUsersCreateRoute,
  adminContactsIndexRoute: adminContactsIndexRoute,
  adminUsersIndexRoute: adminUsersIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
